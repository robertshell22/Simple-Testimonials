<?php

/**
 * @file
 * The Testimonials module allows users to create and display testimonials content.
 */

/**
 * @file
 * Code for the Testimonials feature.
 */

include_once 'simple_testimonials.features.inc';

/**
 * Implements hook_permission().
 */
function simple_testimonials_permission() {
  return array(
    'administer testimonials' => array(
      'title' => t('Administer Testimonials module'),
    ),
  );
}


/**
 * Implements hook_node_access().
 */
function simple_testimonials_node_access($node, $op, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = $user;
  }
  // Ignore non-testimonials node.
  if ((is_object($node) ? $node->type : $node) !== 'testimonials') {
    return NODE_ACCESS_IGNORE;
  }

  if ($op != 'create') {
    $node = (object) $node;
  }
  if ($op == 'view') {
    return NODE_ACCESS_IGNORE;
  }
  elseif ($op == 'create' || $op == 'update' || $op == 'delete') {
    if (user_access('administer testimonials')) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function simple_testimonials_menu() {
  $items = array();
  $testimonials_path = variable_get('testimonials_path', 'testimonials');

  $items[$testimonials_path] = array(
    'title' => variable_get('testimonials_title', 'Testimonials'),
    'description' => variable_get('testimonials_description', 'See what customers are saying.'),
    'page callback' => 'views_embed_view',
    'page arguments' => array('testimonials', 'testimonials_page', 1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'menu_name' => 'main-menu',
    'weight' => 0,
    'plid' => 0,
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/simple_testimonials'] = array(
    'title' => 'Testimonials',
    'description' => 'Allows the user to configure the layout of testimonials on the testimonials page.',
    'file' => 'simple_testimonials.admin.inc',
    'page callback' => 'simple_testimonials_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer testimonials'),
  );
  $items['admin/config/content/simple_testimonials/general'] = array(
    'title' => 'General',
    'description' => 'Allows the user to configure the header and descriptive text for the testimonials page.',
    'file' => 'simple_testimonials.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_testimonials_general_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer testimonials'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}


/**
 * Implements hook_node_info().
 *
 * Defines the Testimonial node/content type.
 * @return array
 *   An array, containing the title, module name and the description.
 */
function simple_testimonials_node_info() {
  return array(
    'testimonial' => array(
      'name' => t('Testimonial'),
      'base' => 'testimonial',
      'description' => t('A testimonial with author information and photo.'),
      'has_title' => '1',
      'title_label' => t('Headline'),
    ),
  );
}

/**
 * Implements hook_form().
 *
 * @param object $node
 *   The node being added or edited.
 *
 * @param array $form_state
 *   The hook can set this variable to an associative array of attributes to add
 *   to the enclosing <form> tag.
 *
 * @return array
 *   The form elements in the $form array.
 */
function simple_testimonials_form($node, $form_state) {
  $type = node_type_get_type($node);
  $form = node_content_form($node, $form_state);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => !empty($node->title) ? $node->title : '',
    '#required' => TRUE,
    '#weight' => -5,
    '#description' => t('Enter a short teaser for this testimonial.'),
  );

  return $form;
}

function simple_testimonials_form_testimonial_node_form_alter(&$form, &$form_state, $form_id) {
  // Modification for the form with the given form ID goes here. For example, if
  // FORM_ID is "user_register_form" this code would run only on the user
  // registration form.

  $form['title']['#description'] = t('Enter a short teaser for this testimonial.');
}

/**
 * Implements hook_view().
 */
function simple_testimonials_view($node, $view_mode) {
  drupal_add_css(drupal_get_path('module', 'simple_testimonials') . '/css/simple_testimonials_flexslider.css', array('weight' => 1));
  drupal_add_css(drupal_get_path('module', 'simple_testimonials') . '/css/simple_testimonials.css', array('weight' => 2));
}

/**
 * Implements hook_views_api().
 */
function simple_testimonials_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'simple_testimonials') . '/views',
  );
}

drupal_add_css(drupal_get_path('module', 'simple_testimonials') . '/css/simple_testimonials_flexslider.css', array(
  'group' => CSS_DEFAULT,
  'weight' => 1,
  'every_page' => TRUE
));
drupal_add_css(drupal_get_path('module', 'simple_testimonials') . '/css/simple_testimonials.css', array(
  'group' => CSS_DEFAULT,
  'weight' => 2,
  'every_page' => TRUE
));

/**
 * Implements hook_field_default_field_instances_alter().
 *
 * Set the default image.
 */
function simple_testimonials_field_default_field_instances_alter(&$fields) {
  if (isset($fields['node-testimonial-field_testimonial_image']['settings']['default_image'])) {
    $fid = $fields['node-testimonial-field_testimonial_image']['settings']['default_image'];
    $fields['node-testimonial-field_testimonial_image']['settings']['default_image'] = variable_get('testimonials_testimonial_testimonial_image_fid', $fid);
  }
}

/**
 * Helper to replace default field base image.
 *
 * @param $field_name
 * @param $filename
 * @param $source
 */
function _simple_testimonials_replace_default_image($field_name, $filename, $source) {

  $field = field_info_field($field_name);


  if (file_exists($source)) {
    $file = new stdClass;
    $file->filename = $filename;
    $file->timestamp = REQUEST_TIME;
    $file->uri = $source;
    $file->filemime = file_get_mimetype($source);
    $file->uid = 1;
    $file->status = 1;
    $file = file_copy($file, 'public://default_images', FILE_EXISTS_REPLACE);
    $fid = $file->fid;

    // Replace old fid with new fid.
    $field['settings']['default_image'] = (string) $fid;

    // Update field.
    field_update_field($field);
  }
}


/**
 * Override Flexslider styles.
 */

function simple_testimonials_css_alter(&$css) {

  if (isset($css[libraries_get_path('flexslider') . '/flexslider.css'])) {
    $css[libraries_get_path('flexslider') . '/flexslider.css']['data'] = drupal_get_path('modules', 'simple_testimonials') . '/css/simple_testimonials_flexslider.css';
  }
}

